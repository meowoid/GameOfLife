The getSound method returns a SineWaveSound object for a given state of the game of life.
It takes in as the parameters, the population and the double and calculates the frequency
using simple algebra. Every 8 generations, a low frequency is used for the SineWaveSound
to simulate a bass drum using generation modulo 8 = 0. Every generation after that one, a lower
frequency is used to simulate a double bass with a lower frequency. Otherwise, a simple 
multiplication and modulo is done on the population and generation to simulate a melody depending
on the game of life.

The makeTune method takes a game state, number of generations to use and the filename of the 
tune. An AudioSequence object is created and SineWaveSounds are added to the appropriate 
timeslices using a for loop to go through the first 'rep' states. To add further music
to the tune, after generation 60, additional high frequency SineWaveSound is added to the
timeslice for 10 generaions, every 10 generations/10 modulo 10.

java -cp sounds.jar:. uk.ac.cam.yp242.tick5star.SoundLife "dragon:Life lexicon:60:44:15:15:000000000000010011000000100111 000001000111101111110000100111 011111000010000100001110000000 100000011010000001101110010111 011111011100000000111100010111 000001001000000000000001000000 000000001100000000001101100000 000000001100000000001101100000 000001001000000000000001000000 011111011100000000111100010111 100000011010000001101110010111 011111000010000100001110000000 000001000111101111110000100111 000000000000010011000000100111" 160 competition.wav

